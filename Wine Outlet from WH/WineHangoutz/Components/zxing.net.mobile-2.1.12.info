{"Name":"ZXing.Net.Mobile","Id":2898,"Alias":"zxing.net.mobile","Description":"ZXing.Net.Mobile is a C#/.NET library based on the open source Barcode Library: ZXing (Zebra Crossing), using the ZXing.Net Port. It works with Xamarin.iOS, Xamarin.Android, Windows Phone (Silverlight) and Windows Universal. The goal of ZXing.Net.Mobile is to make scanning barcodes as effortless and painless as possible in your own applications!\n\n\n\n## Features\n\n- Xamarin.iOS\n- Xamarin.Android\n- Windows Phone (Silverlight)\n- Windows Universal (UAP 10)\n- Simple API - Scan in as little as 2 lines of code!\n- Scanner as a View - UIView (iOS) / Fragment (Android) / Control (WP)\n- Custom Overlays\n- AVCaptureSession Detection optional support for iOS\n","Version":"2.1.12","Summary":"ZXing.Net.Mobile is a C#/.NET Barcode Scanning Library","QuickStart":"# Getting Started #\n\nYou can use ZXing.Net.Mobile for Forms in your iOS, Android, Windows Phone (Silverlight) and Windows Universal Forms projects.\n\n### Usage\n\nThe simplest example of using ZXing.Net.Mobile looks something like this:\n\n```csharp\nbuttonScan.Click += (sender, e) =\u003e {\n\t\n\tvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\n\tvar result = await scanner.Scan();\n\n\tif (result != null)\n    \tConsole.WriteLine(\"Scanned Barcode: \" + result.Text);\n};\n```\n\nNOTE: On Android you must call the platform specific initializer sometime before trying to scan:\n\n```csharp\n// Somewhere in your app, call the initialization code:\nMobileBarcodeScanner.Initialize (Application);\n```\n\n### Android Versions\nThe component should work on Android 2.2 or higher.  In Xamarin.Android there are 3 places in the project settings relating to Android version.  YOU ***MUST*** set the Project Options -\u003e Build -\u003e General -\u003e Target Framework to ***2.3*** or higher.  If you still want to use 2.2, you can set the Project Options -\u003e Build -\u003e Android Application -\u003e Minimum Android version to 2.2, but be sure to set the Target Android version in this section to 2.3 or higher.\n\nYou must also add a reference to the Component `Android Support Library v4` https://components.xamarin.com/view/xamandroidsupportv4-18 from the Component Store.\n\n### Android Permissions\n\nThe `Camera` permission should automatically be added to your `AndroidManifest.xml` for you (it\u0027s required for barcode scanning), however the `Flashlight` permission needs to be manually added if you would like to use Torch API\u0027s.  You can add it by adding the following assembly level attribute to your app:\n\n```csharp\nssembly: UsesPermission (Android.Manifest.Permission.Flashlight)]\n```\n\n###Custom Overlays\nBy default, ZXing.Net.Mobile provides a very simple overlay for your barcode scanning interface.  This overlay consists of a horizontal red line centered in the scanning \u0027window\u0027 and semi-transparent borders on the top and bottom of the non-scanning area.  You also have the opportunity to customize the top and bottom text that appears in this overlay.\n\nIf you want to customize the overlay, you must create your own View for each platform.  You can customize your overlay like this:\n\n```csharp\nvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\nscanner.UseCustomOverlay = true;\nscanner.CustomOverlay = myCustomOverlayInstance;\nvar result = await scanner.Scan();\n//Handle result\n```\n\nKeep in mind that when using a Custom Overlay, you are responsible for the entire overlay (you cannot mix and match custom elements with the default overlay).  The *ZxingScanner* instance has a *CustomOverlay* property, however on each platform this property is of a different type:\n\n- Xamarin.iOS =\u003e **UIView**\n- Xamarin.Android =\u003e **View**\n- Windows Phone =\u003e **UIElement**\n\nAll of the platform samples have examples of custom overlays.\n\n###Barcode Formats\nBy default, all barcode formats are monitored while scanning.  You can change which formats to check for by passing a ZxingScanningOptions instance into the StartScanning method:\n\n```csharp\nvar options = new ZXing.Mobile.MobileBarcodeScanningOptions();\noptions.PossibleFormats = new List\u003cZXing.BarcodeFormat\u003e() { \n    ZXing.BarcodeFormat.Ean8, ZXing.BarcodeFormat.Ean13 \n};\n\nvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\nvar result = await scanner.Scan(options);\n//Handle result\n```\n\n###Using the ZXingScanner View / Fragment / Control\nOn each platform, the ZXing scanner has been implemented as a reusable component (view, fragment, or control), and it is possible to use the reusable component directly without using the MobileBarcodeScanner class at all.  On each platform, the instance of the view/fragment/control contains the necessary properties and methods required to control your scanner.  By default, the default overlay is automatically used, unless you set the CustomOverlay property as well as the UseCustomOverlay property on the instance of the view/fragment/control.  You can use methods such as ToggleTorch() or StopScanning() on the view/fragment/control, however you are responsible for calling StartScanning(...) with a callback and an instance of MobileBarcodeScanningOptions when you are ready for the view\u0027s scanning to begin.  You are also responsible for stopping scanning if you want to cancel at any point.\n\nThe view/fragment/control classes for each platform are:\n\n - iOS: ZXingScannerView (UIView) - See ZXingScannerViewController.cs View Controller for an example of how to use this view\n - iOS: AVCaptureScannerView (UIView) - This is API equivalent to ZXingScannerView, but uses Apple\u0027s AVCaptureSession Metadata engine to scan the barcodes instead of ZXing.Net.  See AVCaptureScannerViewController.cs View Controller for an example of how to use this view\n - Android: ZXingScannerFragment (Fragment) - See ZXingActivity.cs Activity for an example of how to use this fragment\n - Windows Phone: ZXingScannerControl (UserControl) - See ScanPage.xaml Page for an example of how to use this Control\n\n\n###Using Apple\u0027s AVCaptureSession (iOS7 Built in) Barcode Scanning\nIn iOS7, Apple added some API\u0027s to allow for scanning of barcodes in an AVCaptureSession.  The latest version of ZXing.Net.Mobile gives you the option of using this instead of the ZXing scanning engine.  You can use the `AVCaptureScannerView` or the `AVCaptureScannerViewController` classes directly just the same as you would use their ZXing* equivalents.  Or, in your `MobileBarcodeScanner`, there is now an overload to use the AV Capture Engine:\n\n```csharp\n//Scan(MobileBarcodeScanningOptions options, bool useAVCaptureEngine)\nscanner.Scan(options, true);\n```\nIn the MobileBarcodeScanner, even if you specify to use the AVCaptureSession scanning, it will gracefully degrade to using ZXing if the device doesn\u0027t support this (eg: if it\u0027s not iOS7 or newer), or if you specify a barcode format in your scanning options which the AVCaptureSession does not support for detection.  The AVCaptureSession can only decode the following barcodes:\n\n- Aztec\n- Code 128\n- Code 39\n- Code 93\n- EAN13\n- EAN8\n- PDF417\n- QR\n- UPC-E\n\n###License\nApache ZXing.Net.Mobile Copyright 2012 The Apache Software Foundation\nThis product includes software developed at The Apache Software Foundation (http://www.apache.org/).\n\n### ZXing.Net\nZXing.Net is released under the Apache 2.0 license.\nZXing.Net can be found here: http://zxingnet.codeplex.com/\nA copy of the Apache 2.0 license can be found here: http://www.apache.org/licenses/LICENSE-2.0\n\n### ZXing\nZXing is released under the Apache 2.0 license.\nZXing can be found here: https://github.com/zxing/zxing\nA copy of the Apache 2.0 license can be found here: http://www.apache.org/licenses/LICENSE-2.0\n\n### System.Drawing\nThe System.Drawing classes included are from the mono source code which is property of Novell.\nCopyright notice is intact in source code files.\n","Hash":"bc21d0106835c7b9f433617590fd339f","TargetPlatforms":["ios","ios-unified","android","winphone-7.0","winphone-7.1","mobile"],"TrialHash":null}